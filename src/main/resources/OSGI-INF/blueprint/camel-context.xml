<?xml version="1.0" encoding="UTF-8"?>

<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xmlns:cxf="http://camel.apache.org/schema/blueprint/cxf"
           xsi:schemaLocation="
                 http://www.osgi.org/xmlns/blueprint/v1.0.0 http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
                 http://camel.apache.org/schema/blueprint/cxf http://camel.apache.org/schema/blueprint/cxf/camel-cxf.xsd
                 http://camel.apache.org/schema/blueprint http://camel.apache.org/schema/blueprint/camel-blueprint.xsd
                 http://camel.apache.org/schema/blueprint/cxf ">

    <!--Rest Servers Endpoint-->
    <cxf:rsServer id="fileService"
                  address="http://localhost:9001"
                  serviceClass="CxfRestApi.service.FileService"
                  loggingFeatureEnabled="true">

    </cxf:rsServer>
    <!--End Rest-Servers Endpoint-->

    <!-- Connect ActiveMq -->
    <bean id="activemq" class="org.apache.activemq.camel.component.ActiveMQComponent">
        <property name="brokerURL" value="tcp://localhost:61617"/>
    </bean>

    <!--Start implmentation beans-->
    <bean id="RenameFile" class="CxfRestApi.beans.RenameFile"/>
    <bean id="AddToList" class="CxfRestApi.beans.AddToList"/>
    <bean id="fileRestServiceNormlizer" class="CxfRestApi.beans.FileRestServiceNormlizer"/>
    <bean id="ProcessFile" class="CxfRestApi.beans.ProcessFile"/>
    <bean id="generateOrder" class="CxfRestApi.beans.GeneratedOrder"/>
    <bean id="FileMapper" class="CxfRestApi.beans.FileMapper"/>

    <!--End Beans -->


    <!--    Database Connection -->
    <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="com.mysql.jdbc.Driver"/>
        <property name="url" value="jdbc:mysql://localhost:3306/job?characterEncoding=utf8"/>
        <property name="username" value="root"/>
        <property name="password" value="root"/>
    </bean>

    <bean id="sql" class="org.apache.camel.component.sql.SqlComponent">
        <property name="dataSource" ref="dataSource"/>
    </bean>


    <!--    End bean to connect Database -->

    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:order="http://fabric8.com/examples/order/v7"
                  id="Camel_Rest_Context">

        <propertyPlaceholder id="Camelproperties" location="/properities/Camel.properties"/>

        <!--      Exception clause to detect any (exception) occur and handling it-->
        <onException>
            <exception>java.lang.Exception</exception>
            <handled>
                <constant>true</constant>
            </handled>
            <log loggingLevel="ERROR" message="there is Exception Occur here "/>
            <log message="Exception handling Message payloads :- ${body} , Exception messgae   :- ${exception.message}  "/>
            <setHeader headerName="ExceptionMessage">
                <simple>${exception.message}</simple>
            </setHeader>
            <bean ref="fileRestServiceNormlizer" method="responseException"/>
            <marshal>
                <json library="Gson"/>
            </marshal>
        </onException>

        <!--        Read files name from specific directory -->
        <route id="ReadingFromDirectory">
            <from uri="file:{{file.uri}}/files/?noop=true"/>
            <setHeader headerName="fileName">
                <simple>${file:name.noext}</simple>
            </setHeader>
            <process ref="AddToList"/>
            <log message=" file ---> ${body} "/>
        </route>

        <!--        Read from cxf (End Points) and go to route based operation name -->
        <route id="listingFromCxf">
            <from uri="cxfrs:bean:fileService"/>

            <when>
                <simple>${header.operationName} == 'moveFile'</simple>
                <bean ref="fileRestServiceNormlizer" method="normlizeFileMoveRequest"/>
                <to uri="direct:fileRenameService"/>
            </when>

            <when>
                <simple>${header.operationName} == 'insertListOfFile'</simple>
                <bean ref="fileRestServiceNormlizer" method="normlizeFileMoveRequest"/>
                <to uri="direct:insertListOfFiles"/>
            </when>

            <when>
                <simple>${header.operationName} == 'insertFileName'</simple>
                <bean ref="fileRestServiceNormlizer" method="normlizeFileMoveRequest"/>
                <to uri="direct:insertFileName"/>
            </when>

            <when>
                <simple>${header.operationName} == 'getFileName'</simple>
                <to uri="direct:getFileName"/>
            </when>

        </route>

        <!--       POST file name to check it if (not null and contain in the directory ) then rename it  -->
        <route id="fileRenameService">
            <from uri="direct:fileRenameService"/>
            <unmarshal>
                <json library="Gson"
                      unmarshalTypeName="CxfRestApi.model.FileRenameRequest"/>
            </unmarshal>
            <log message="Recived File from  (SendFileToSource) route , Request body :- ${body} "/>
            <bean ref="RenameFile" method="RenameFileFromTo"/>
            <log message=" the message body is ${body} and the header is ${header.previousName}"/>
            <bean ref="fileRestServiceNormlizer" method="returnResponseFileName"/>
            <marshal>
                <json library="Gson"/>
            </marshal>
        </route>

        <!--       POST list of file name method and use this name to insert it to the database -->
        <route id="insertListOfFiles">
            <from uri="direct:insertListOfFiles"/>
            <unmarshal>
                <json library="Gson"
                      unmarshalTypeName="CxfRestApi.model.FileMoveRequest"/>
            </unmarshal>
            <bean ref="fileRestServiceNormlizer" method="returnResponseInsertFilesName"/>
            <marshal>
                <json library="Gson"/>
            </marshal>
            <log message="(insertListOfFiles) POST method is calling now ) "/>
        </route>

        <!--       POST file name method and use this name to store in the variable te read it later
                 , Insert data to (file_job) table in (job) database NOTE:- see Camel.properites file-->
        <route id="insertFileName">
            <from uri="direct:insertFileName"/>
            <unmarshal>
                <json library="Gson"
                      unmarshalTypeName="CxfRestApi.model.FileRenameRequest"/>
            </unmarshal>
            <log message="(insertFileName) POST method is calling now ) "/>
            <transform>
                <method ref="generateOrder" method="generateOrder"/>
            </transform>
            <to uri="sql:{{sql.insertOrder}}"/>
            <log message="Inserted new order ${body}"/>
            <bean ref="fileRestServiceNormlizer" method="fileRenameRequest"/>
            <marshal>
                <json library="Gson"/>
            </marshal>
        </route>

        <!--       GET file name method   -->
        <route id="getFileName">
            <from uri="direct:getFileName"/>
            <to uri="sql:{{sql.selectLastRecord}}"/>
            <bean ref="FileMapper" method="getFileName"/>
            <marshal>
                <json library="Gson"/>
            </marshal>
            <to uri="activemq:queue:testQ" />
            <log message="(getFileName) GET method is calling now ) "/>
        </route>

        <!--       Read from database -->
        <route id="updateRecordsFromDatabase">
            <from uri="quartz://updateRecordsEveryTimePeriod?cron=0/15+*+*+*+*+?"/>
            <to uri="sql:{{sql.updateStutsRecords}}"/>
        </route>

        <route id="printAllDataFromDatabase">
            <from uri="quartz://printAllDataFromDatabase?cron=0/15+*+*+*+*+?"/>
            <log message="print all data from database "/>
            <to uri="sql:{{sql.selectAll}}"/>
            <bean ref="FileMapper" method="fileMapperService"/>
        </route>

        <route id="readFileNameFromQueue">
            <from uri="activemq:queue:testQ" />
            <unmarshal>
                <json library="Gson" unmarshalTypeName="CxfRestApi.model.FileF" />
            </unmarshal>
            <transform>
                <method ref="FileMapper" method="getName" />
            </transform>
<!--            <bean ref="FileMapper" method="getName" />-->
            <log message=" this is message from active mq ${body} " />

<!--            <to uri="file:{{file.uri}}/files" />-->
        </route>
        <!--        <route id="splitListOfFileName" >-->
        <!--            <from uri="direct:" />-->
        <!--            <from uri="sql:{{sql.selectSpecificNumberOfRecords}}"/>-->
        <!--            <log message="body message inside splitListOfFileName  ${body} " />-->
        <!--            <bean ref="FileMapper" method=""   />-->
        <!--        </route>-->

    </camelContext>


    <camelContext xmlns="http://camel.apache.org/schema/blueprint"
                  xmlns:order="http://fabric8.com/examples/order/v7"
                  id="Camel_HttpMethods_Context">

        <!-- Call POST ( list of files ) Method by camel   -->
        <!--        <route id="postFileName">-->
        <!--            <from uri="quartz://postEveryTimePeriod?cron=0/15+*+*+*+*+?"/>-->
        <!--            <setHeader headerName="CamelHttpMethod">-->
        <!--                <constant>POST</constant>-->
        <!--            </setHeader>-->
        <!--            <log message=" ${body} "/>-->
        <!--            <transform>-->
        <!--                <simple>TCRM</simple>-->
        <!--            </transform>-->
        <!--            <to uri="http://localhost:9001/fileService/moveFile"/>-->
        <!--        </route>-->

        <!-- Call GET ( file name ) Method by camel   -->
        <route id="getFileNameRoute">
            <from uri="direct-vm:getFileNameRoute"/>
            <setHeader headerName="CamelHttpMethod">
                <constant>GET</constant>
            </setHeader>
            <to uri="http://localhost:9001/fileService/getFileName"/>
            <log message="Response from (getFileName) request is ${body} every 5sec"/>
        </route>


    </camelContext>

</blueprint>